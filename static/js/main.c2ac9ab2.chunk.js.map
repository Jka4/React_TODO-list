{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","index","completeTodo","removeTodo","react_default","a","createElement","className","style","textDecoration","isCompleted","aria-hidden","data-prefix","data-icon","class","xmlns","viewBox","fill","d","onClick","text","TodoForm","_ref2","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","_useState3","_useState4","todos","setTodos","newTodos","toConsumableArray","splice","concat","map","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAGA,SAASA,EAATC,GAAyD,IAAzCC,EAAyCD,EAAzCC,KAAMC,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,aAAcC,EAAcJ,EAAdI,WACzC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,YACVC,MAAO,CAAEC,eAAgBT,EAAKU,YAAc,eAAiB,SAC7DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAMbH,EAAAC,EAAAC,cAAA,OACEK,cAAY,OACZC,cAAY,MACZC,YAAU,QACVC,MAAM,wCACNC,MAAM,6BACNC,QAAQ,eACPhB,EAAKU,aACJN,EAAAC,EAAAC,cAAA,QACEW,KAAK,QACLC,EAAE,wRAKRd,EAAAC,EAAAC,cAAA,UAAQa,QAAS,kBAAMjB,EAAaD,KAApC,YACAG,EAAAC,EAAAC,cAAA,UAAQa,QAAS,kBAAMhB,EAAWF,KAAlC,MAEDD,EAAKoB,OAMd,SAASC,EAATC,GAA+B,IAAXC,EAAWD,EAAXC,QAAWC,EACHC,mBAAS,IADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBK,EADsBH,EAAA,GACfI,EADeJ,EAAA,GAU7B,OACEtB,EAAAC,EAAAC,cAAA,QAAMyB,SARa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLN,EAAQM,GACRC,EAAS,OAKP1B,EAAAC,EAAAC,cAAA,SACE4B,KAAK,OACL3B,UAAU,QACV4B,YAAY,sEACZN,MAAOA,EACPO,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,UAEnCzB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAlB,QA6DS+B,MAxDf,WAAe,IAAAC,EACWd,mBAAS,CAC/B,CACEL,KAAM,wFACNV,aAAa,GAEf,CACEU,KAAM,uGACNV,aAAa,GAEf,CACEU,KAAM,wHACNV,aAAa,KAZJ8B,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GACRE,EADQD,EAAA,GACDE,EADCF,EAAA,GAqBPtC,EAAe,SAAAD,GACnB,IAAM0C,EAAQhB,OAAAiB,EAAA,EAAAjB,CAAOc,IAEW,IAAhCE,EAAS1C,GAAOS,YACXiC,EAAS1C,GAAOS,aAAc,EAC9BiC,EAAS1C,GAAOS,aAAc,EAEnCgC,EAASC,IAGLxC,EAAa,SAAAF,GACjB,IAAM0C,EAAQhB,OAAAiB,EAAA,EAAAjB,CAAOc,GACrBE,EAASE,OAAO5C,EAAO,GACvByC,EAASC,IAGX,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACe,EAAD,CAAUE,QAxBA,SAAAH,GACd,IAAMuB,EAAQ,GAAAG,OAAAnB,OAAAiB,EAAA,EAAAjB,CAAOc,GAAP,CAAc,CAAErB,UAC9BsB,EAASC,MAwBJF,EAAMM,IAAI,SAAC/C,EAAMC,GAAP,OACTG,EAAAC,EAAAC,cAACR,EAAD,CACEkD,IAAK/C,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,SCnGJ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c2ac9ab2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <div className='todo'>\n      <p\n        className='todo_text'\n        style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"none\" }}>\n        <div className='todo_buttons'>\n          {/* <img\n            className='check'\n            src='../icons/check-solid.svg'\n            alt='check'\n          /> */}\n          <svg\n            aria-hidden='true'\n            data-prefix='fas'\n            data-icon='check'\n            class='svg-inline--fa fa-check fa-w-16 check'\n            xmlns='http://www.w3.org/2000/svg'\n            viewBox='0 0 512 512'>\n            {todo.isCompleted && (\n              <path\n                fill='green'\n                d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'\n              />\n            )}\n          </svg>\n\n          <button onClick={() => completeTodo(index)}>Complete</button>\n          <button onClick={() => removeTodo(index)}>x</button>\n        </div>\n        {todo.text}\n      </p>\n    </div>\n  );\n}\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='text'\n        className='input'\n        placeholder='Новая задача'\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n      <button className='addButton'>Add</button>\n    </form>\n  );\n}\n\nfunction App() {\n  let [todos, setTodos] = useState([\n    {\n      text: \"Сделать тудушку\",\n      isCompleted: false\n    },\n    {\n      text: \"Залить в репу на гит\",\n      isCompleted: false\n    },\n    {\n      text: \"Добавить ссылку в доку\",\n      isCompleted: false\n    }\n  ]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n\n    newTodos[index].isCompleted !== true\n      ? (newTodos[index].isCompleted = true)\n      : (newTodos[index].isCompleted = false);\n\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className='app'>\n      <div className='todo-list'>\n        <TodoForm addTodo={addTodo} />\n\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}